# Generated by Django 4.0.1 on 2022-02-09 21:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission_number', models.CharField(blank=True, max_length=256, null=True)),
                ('pin', models.CharField(blank=True, max_length=256, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=6)),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('photo', models.ImageField(blank=True, help_text='upload profile photo', upload_to='')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], max_length=32)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='last modified date')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_arm', models.CharField(blank=True, max_length=32, null=True, verbose_name='Class arm')),
                ('term', models.CharField(blank=True, choices=[('1', 'First Term'), ('2', 'Second Term'), ('3', 'Third Term')], max_length=32, null=True)),
                ('session', models.CharField(blank=True, max_length=32, null=True, verbose_name='Academic session')),
                ('continuous_assessment', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Continuous assessment score')),
                ('test_score', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Test score')),
                ('exam_score', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Exam score')),
                ('average_score', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Average score')),
                ('grade', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], max_length=32, null=True)),
                ('class_highest_score', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Class highest score')),
                ('class_lowest_score', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Class lowest score')),
                ('class_average_score', models.FloatField(blank=True, default=0, max_length=32, null=True, verbose_name='Class average score')),
                ('class_position', models.CharField(blank=True, max_length=32, null=True, verbose_name='Position in class')),
                ('total_students_number', models.IntegerField(blank=True, default=0, null=True, verbose_name='Total number of students in class')),
                ('result_in_pdf', models.FileField(blank=True, help_text='upload result in PDF format', upload_to='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='last modified date')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
            ],
        ),
        migrations.CreateModel(
            name='Remark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('1', 'First Term'), ('2', 'Second Term'), ('3', 'Third Term')], max_length=32, null=True)),
                ('remark', models.CharField(blank=True, choices=[('PASS', 'PASS'), ('FAIL', 'FAIL')], max_length=32, null=True)),
                ('name', models.CharField(blank=True, max_length=32, null=True, verbose_name="Instructor's name")),
                ('signature', models.FileField(blank=True, help_text='upload signature of the instructor', upload_to='')),
                ('remark_in_pdf', models.FileField(blank=True, help_text='upload remark in PDF format', upload_to='')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
            ],
            options={
                'verbose_name_plural': 'Remark on the student',
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.subject')),
            ],
            options={
                'verbose_name_plural': 'Performances',
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True, verbose_name='Parent or Guardian')),
                ('relationship', models.CharField(blank=True, choices=[('F', 'Father'), ('M', 'Mother'), ('B', 'Brother'), ('S', 'Sister'), ('G', 'Guardian'), ('SP', 'Sponsor'), ('O', 'Others')], max_length=32, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
            ],
            options={
                'verbose_name_plural': 'Parents',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
            ],
        ),
        migrations.CreateModel(
            name='Hostel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostel', models.CharField(blank=True, max_length=225, null=True)),
                ('room', models.IntegerField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=225, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
            ],
            options={
                'verbose_name_plural': 'Hostel Allocations',
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance', models.CharField(blank=True, choices=[('P', 'Present'), ('A', 'Absence')], max_length=32, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentportal.student')),
            ],
        ),
    ]
